class Solution:
    def countVowelPermutation(self, n: int) -> int:
        MOD = 10**9 + 7
        
        def matrix_mult(A, B):
            return [[(A[0][0]*B[0][0] + A[0][1]*B[1][0] + A[0][2]*B[2][0] + A[0][3]*B[3][0] + A[0][4]*B[4][0]) % MOD,
                     (A[0][0]*B[0][1] + A[0][1]*B[1][1] + A[0][2]*B[2][1] + A[0][3]*B[3][1] + A[0][4]*B[4][1]) % MOD,
                     (A[0][0]*B[0][2] + A[0][1]*B[1][2] + A[0][2]*B[2][2] + A[0][3]*B[3][2] + A[0][4]*B[4][2]) % MOD,
                     (A[0][0]*B[0][3] + A[0][1]*B[1][3] + A[0][2]*B[2][3] + A[0][3]*B[3][3] + A[0][4]*B[4][3]) % MOD,
                     (A[0][0]*B[0][4] + A[0][1]*B[1][4] + A[0][2]*B[2][4] + A[0][3]*B[3][4] + A[0][4]*B[4][4]) % MOD],
                    
                    [(A[1][0]*B[0][0] + A[1][1]*B[1][0] + A[1][2]*B[2][0] + A[1][3]*B[3][0] + A[1][4]*B[4][0]) % MOD,
                     (A[1][0]*B[0][1] + A[1][1]*B[1][1] + A[1][2]*B[2][1] + A[1][3]*B[3][1] + A[1][4]*B[4][1]) % MOD,
                     (A[1][0]*B[0][2] + A[1][1]*B[1][2] + A[1][2]*B[2][2] + A[1][3]*B[3][2] + A[1][4]*B[4][2]) % MOD,
                     (A[1][0]*B[0][3] + A[1][1]*B[1][3] + A[1][2]*B[2][3] + A[1][3]*B[3][3] + A[1][4]*B[4][3]) % MOD,
                     (A[1][0]*B[0][4] + A[1][1]*B[1][4] + A[1][2]*B[2][4] + A[1][3]*B[3][4] + A[1][4]*B[4][4]) % MOD],
                    
                    [(A[2][0]*B[0][0] + A[2][1]*B[1][0] + A[2][2]*B[2][0] + A[2][3]*B[3][0] + A[2][4]*B[4][0]) % MOD,
                     (A[2][0]*B[0][1] + A[2][1]*B[1][1] + A[2][2]*B[2][1] + A[2][3]*B[3][1] + A[2][4]*B[4][1]) % MOD,
                     (A[2][0]*B[0][2] + A[2][1]*B[1][2] + A[2][2]*B[2][2] + A[2][3]*B[3][2] + A[2][4]*B[4][2]) % MOD,
                     (A[2][0]*B[0][3] + A[2][1]*B[1][3] + A[2][2]*B[2][3] + A[2][3]*B[3][3] + A[2][4]*B[4][3]) % MOD,
                     (A[2][0]*B[0][4] + A[2][1]*B[1][4] + A[2][2]*B[2][4] + A[2][3]*B[3][4] + A[2][4]*B[4][4]) % MOD],
                    
                    [(A[3][0]*B[0][0] + A[3][1]*B[1][0] + A[3][2]*B[2][0] + A[3][3]*B[3][0] + A[3][4]*B[4][0]) % MOD,
                     (A[3][0]*B[0][1] + A[3][1]*B[1][1] + A[3][2]*B[2][1] + A[3][3]*B[3][1] + A[3][4]*B[4][1]) % MOD,
                     (A[3][0]*B[0][2] + A[3][1]*B[1][2] + A[3][2]*B[2][2] + A[3][3]*B[3][2] + A[3][4]*B[4][2]) % MOD,
                     (A[3][0]*B[0][3] + A[3][1]*B[1][3] + A[3][2]*B[2][3] + A[3][3]*B[3][3] + A[3][4]*B[4][3]) % MOD,
                     (A[3][0]*B[0][4] + A[3][1]*B[1][4] + A[3][2]*B[2][4] + A[3][3]*B[3][4] + A[3][4]*B[4][4]) % MOD],
                    
                    [(A[4][0]*B[0][0] + A[4][1]*B[1][0] + A[4][2]*B[2][0] + A[4][3]*B[3][0] + A[4][4]*B[4][0]) % MOD,
                     (A[4][0]*B[0][1] + A[4][1]*B[1][1] + A[4][2]*B[2][1] + A[4][3]*B[3][1] + A[4][4]*B[4][1]) % MOD,
                     (A[4][0]*B[0][2] + A[4][1]*B[1][2] + A[4][2]*B[2][2] + A[4][3]*B[3][2] + A[4][4]*B[4][2]) % MOD,
                     (A[4][0]*B[0][3] + A[4][1]*B[1][3] + A[4][2]*B[2][3] + A[4][3]*B[3][3] + A[4][4]*B[4][3]) % MOD,
                     (A[4][0]*B[0][4] + A[4][1]*B[1][4] + A[4][2]*B[2][4] + A[4][3]*B[3][4] + A[4][4]*B[4][4]) % MOD]]
        
        def matrix_power(M, power):
            result = [[1 if i == j else 0 for j in range(5)] for i in range(5)]
            base = M
            while power:
                if power % 2:
                    result = matrix_mult(result, base)
                base = matrix_mult(base, base)
                power //= 2
            return result
        
        transition_matrix = [
            [0, 1, 0, 0, 0],  
            [1, 0, 1, 0, 0],  
            [1, 1, 0, 1, 1],  
            [0, 0, 1, 0, 1],  
            [1, 0, 0, 0, 0]   
        ]
        
        if n == 1:
            return 5
        
        final_matrix = matrix_power(transition_matrix, n - 1)
        return sum(final_matrix[0]) % MOD
